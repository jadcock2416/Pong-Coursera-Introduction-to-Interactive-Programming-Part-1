# http://www.codeskulptor.org/#user47_ggdvxeBLapo5JKm_5.py

# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
direction = LEFT
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new ball in middle of table
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]

# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel[0] = random.randrange(120,240) / 60
    ball_vel[1] = random.randrange(60,180) / 60
    if direction == RIGHT:
        ball_vel[1] = - ball_vel[1]
    elif direction == LEFT:
        ball_vel[0] = - ball_vel[0]
        ball_vel[1] = - ball_vel[1]
    
   
        

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(direction)
    paddle1_pos = (HEIGHT / 2 + HALF_PAD_HEIGHT)
    paddle2_pos = (HEIGHT / 2 + HALF_PAD_HEIGHT) 
    paddle1_vel = 0
    paddle2_vel = 0

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    """ test if ball touches top or bottom and reverse direction"""
    if (ball_pos[1] >= HEIGHT - BALL_RADIUS) or (ball_pos[1] <= BALL_RADIUS):
        ball_vel[1] = - ball_vel[1]
        
    """ test if ball touches left or right gutter and spawn new ball """      
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if ((paddle1_pos >= ball_pos[1]) and (paddle1_pos - PAD_HEIGHT <= ball_pos[1])):
            ball_vel[0] = (ball_vel[0] + ball_vel[0] * 0.1) * (-1)
            ball_vel[1] += ball_vel[1] * 0.1
        else: 
            spawn_ball(RIGHT)
            score2 += 1
            
    if ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS:
        if ((paddle2_pos >= ball_pos[1]) and (paddle2_pos - PAD_HEIGHT <= ball_pos[1])):
            ball_vel[0] = (ball_vel[0] + ball_vel[0] * 0.1) * (-1)
            ball_vel[1] += ball_vel[1] * 0.1           
        else:
            spawn_ball(LEFT)
            score1 += 1
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "white", "white")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos <= PAD_HEIGHT:
        paddle1_pos = PAD_HEIGHT + 1
    elif paddle1_pos >= HEIGHT:
        paddle1_pos = HEIGHT - 1
    else:
        paddle1_pos += paddle1_vel
    
    if paddle2_pos <= PAD_HEIGHT:
        paddle2_pos = PAD_HEIGHT + 1
    elif paddle2_pos >= HEIGHT:
        paddle2_pos = HEIGHT - 1
    else:
        paddle2_pos += paddle2_vel     
       
    
    
    # draw paddles
    
    canvas.draw_line((PAD_WIDTH / 2, paddle1_pos), (PAD_WIDTH / 2, paddle1_pos - PAD_HEIGHT), PAD_WIDTH, "White")                     
    canvas.draw_line((WIDTH - PAD_WIDTH / 2, paddle2_pos), (WIDTH - PAD_WIDTH / 2, paddle2_pos - PAD_HEIGHT), PAD_WIDTH, "White")
    
    # determine whether paddle and ball collide    
    
    # draw scores
    
    canvas.draw_text(str(score1), (200, 100), 40, "white")
    canvas.draw_text(str(score2), (400, 100), 40, "white")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel -= 5
        
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel += 5
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= 5
        
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 5
    
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
        
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 0
        
def reset():
    global score1, score2
    new_game()
    score1 = 0
    score2 = 0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("reset", reset)


# start frame
new_game()
frame.start()
